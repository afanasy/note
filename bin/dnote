#!/usr/bin/env node
'use strict';
process.title = process.bin = 'dnote';
var Path = require('path'),
    portfinder = require('portfinder'),
    opener = require('opener'),
    parser = require("nomnom"),
    note = require(Path.join(__dirname,'../index.js'));

parser.option('version', {
  flag: true,
  help: 'prints the current dnote version',
  abbr: 'v',
  callback: function() {
    var pkg = require(Path.join(__dirname,'../package.json'));
    return pkg.name + '@' + pkg.version;
  }
});

var serve = function(opts) {
  var config = {};
  if(opts[1]) { 
    config.content = Path.resolve(opts[1]); 
  } else { 
    config.content = process.cwd();
  }
  note.start(config);
};
parser.command('serve').callback(serve)
.help("serve the .md files on a given folder (defaults to current folder)");

var generate = function(opts) {
  var config = {};
  console.log(opts)
  if(opts[1]) { 
    config.content = Path.resolve(opts[1]); 
  } else { 
    config.content = process.cwd();
  }
  if(opts.out) {
    config.outputFolder = opts.out; 
  }
  note.generate(config);
};
parser.command('site')
.option('out', {
    abbr: 'o',
    help: "a folder to save the html files"
 })
.callback(generate)
.help("generate a static website from the .md files on a given folder (defaults to current folder)");

var init = function(opts) {
  var config = {};
  if(opts[1]) { 
    config.content = Path.resolve(opts[1]); 
  } else { 
    config.content = process.cwd();
  }
  if(opts.out) {
    config.outputFolder = opts.out; 
  }
  note.init(config);
};
parser.command('init')
.option('out', {
    abbr: 'o',
    help: "a folder to save the scaffolding files"
 })
.callback(init)
.help("generate a folder with .md files to start your project on a given path (defaults to current folder)");


parser.parse();